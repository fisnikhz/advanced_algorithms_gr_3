(508): https://leetcode.com/problems/most-frequent-subtree-sum/
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int[] findFrequentTreeSum(TreeNode root) {
        HashMap<Integer, Integer> map = new HashMap<>();
        helper(root, map);

        int maxFrequency = 0;
        for (int freq : map.values()) {
            maxFrequency = Math.max(maxFrequency, freq);
        }

        List<Integer> result = new ArrayList<>();
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() == maxFrequency) {
                result.add(entry.getKey());
            }
        }

        int[] resArray = new int[result.size()];
        for (int i = 0; i < result.size(); i++) {
            resArray[i] = result.get(i);
        }

        return resArray;
    }

    int helper(TreeNode node, HashMap<Integer, Integer> map) {
        if (node == null) {
            return 0;
        }

        int left = helper(node.left, map);
        int right = helper(node.right, map);

        int sum = left + node.val + right;
        map.put(sum, map.getOrDefault(sum, 0) + 1);

        return sum;
    }
}

========================================================

(839): https://leetcode.com/problems/similar-string-groups/

class Solution {
    public int numSimilarGroups(String[] strs) {
        int count =0;
        boolean visited[] = new boolean[strs.length];
         for(int i=0;i<strs.length;i++){
            if(!visited[i]){
                count++;
                dfs(i,strs,visited);
            }
        }
        return count;
    }
       public static void dfs(int i,String[] str,boolean vis[]){
        vis[i]=true;
        for(int j=0;j<str.length;j++){
            if(sim(str[i],str[j])&&!vis[j])dfs(j,str,vis);
        }
    }
    public static boolean sim(String a,String b){
        int count=0;
        for(int i=0;i<a.length();i++){
            if(a.charAt(i)!=b.charAt(i))count++;
        }
        return (count==2||count==0);
    }
}